module ALU
(
	input  wire 		clk,
	
	input  wire [3:0] ALU_Select,
	input  wire [7:0] A,
	input  wire [7:0] B,
	
	input  wire [1:0] OV_Ctrl,
	
	output reg  [7:0] ALU_Result,
	
	output wire 		ComparatorResoult,
	
	output reg 			OV
);

	 assign comparatorResoult = ALU_Result[0];

	 wire [8:0] adder;
	 wire [8:0] subtractor;

	 

	 
always @(posedge clk) 
begin
		case(OV_Ctrl)
			2'b00:
				OV <= adder[8];
			2'b01:
				OV <= subtractor[8];
			default:
				OV <= 1'b0;
			endcase
end
	 
assign adder      = {1'b0,A} + {1'b0,B};	
assign subtractor = {1'b0,A} - {1'b0,B}; 

always @(*)
begin
	case(ALU_Select)
		4'b0000:  
			ALU_Result <= A & B;
		4'b0001: 
			ALU_Result <= A | B;
		4'b0010: 
			ALU_Result <= ~A;
		4'b0011: 
			ALU_Result <= A ^ B;
		4'b0100: 
			ALU_Result <= A<<1;
		4'b0101: 
			ALU_Result <= A>>1;
		4'b0110: 
			ALU_Result <= {A[6:0],A[7]};
		4'b0111: 
			ALU_Result <= {A[0],A[7:1]};
		4'b1000: 
			ALU_Result <= adder;
		4'b1001: 
			ALU_Result <= subtractor;
		4'b1010:
			ALU_Result <= (A==B)?8'd1:8'd0;
		4'b1011:   
			ALU_Result <= (A> B)?8'd1:8'd0;
		4'b1100:
			ALU_Result <= (A>=B)?8'd1:8'd0;
		4'b1101:
			ALU_Result <= (A!=B)?8'd1:8'd0;
		4'b1110:
			ALU_Result <= (A<=B)?8'd1:8'd0;
		4'b1111:
			ALU_Result <= (A< B)?8'd1:8'd0;	
endcase
end
	 


	 

	endmodule 