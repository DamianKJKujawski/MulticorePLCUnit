module CPU_UNIT
(
	input 					CLK,

	input			[15:0] 	INPUTS,
	output wire	[15:0] 	OUTPUTS,
	
	input wire				PROGRAMMER_Reset,
	input	wire	[7:0]		PROGRAMMER_InputData,
	input	wire				PROGRAMMER_PCK,
	input	wire				PROGRAMMER_SCK,
	
	input wire				STATESCONTROLLER_WAIT,
	
	output wire 			PROGRAMMER_ACK
);

//STATES CONTROLLER:
	wire _STATESCONTROLLER_CPU_Reset;
	wire _STATESCONTROLLER_CPU_ProgramReset;
	wire _STATESCONTROLLER_CPU_EN;
STATES_CONTROLLER _STATES_CONTROLLER
(
	.CLK(CLK),

	.PROGRAMMMER_Reset(PROGRAMMER_Reset),
	
	.STATESCONTROLLER_WAIT(STATESCONTROLLER_WAIT),		//Stop for diagnostics - jeżeli 0 to program się zatrzyma po wykonaniu pierwszego programu
	.STATESCONTROLLER_CPU_END_Detected(_CORES_CPU_END_Detected),
	
	.STATESCONTROLLER_CPU_ProgramReset(_STATESCONTROLLER_CPU_ProgramReset),
	.STATESCONTROLLER_CPU_Reset(_STATESCONTROLLER_CPU_Reset),
	.STATESCONTROLLER_CPU_EN(_STATESCONTROLLER_CPU_EN),
	.STATESCONTROLLER_BITPERIPHERALS_LOAD(_BITPERIPHERALS_LOAD),
	
	.STATESCONTROLLER_ACK(PROGRAMMER_ACK)
);


//CORES:
	wire _CORES_CPU_END_Detected;
CORES CORES
(
	.CLK(CLK),
	.CPU_ProgramReset(_STATESCONTROLLER_CPU_ProgramReset),
	.CPU_EN(_STATESCONTROLLER_CPU_EN),
	.PROGRAMMER_RESET(_STATESCONTROLLER_CPU_Reset),
	.PROGRAMMER_InputData(PROGRAMMER_InputData),
	.PROGRAMMER_PCK(PROGRAMMER_PCK),
	.PROGRAMMER_SCK(PROGRAMMER_SCK),
	.CORES_CPU_END_Detected(_CORES_CPU_END_Detected),
	//Word Peripherals:
	.CORES_WORDPERIPHERALS_EN(_WORDPERIPHERALS_EN),
	.CORES_WORDPERIPHERALS_WE(_WORDPERIPHERALS_WE),
	.CORES_WORDPERIPHERALS_InADDR(_WORDPERIPHERALS_InADDR),
	.CORES_WORDPERIPHERALS_InDATA(_WORDPERIPHERALS_InDATA),
	.CORES_WORDPERIPHERALS_OutADDR(_WORDPERIPHERALS_OutADDR),
	.CORES_WORDPERIPHERALS_OutDATA(_WORDPERIPHERALS_OutDATA),
	//Bit Peripherals:
	.CORES_BITPERIPHERALS_EN(_BITPERIPHERALS_EN),
	.CORES_BITPERIPHERALS_WE(_BITPERIPHERALS_WE),
	.CORES_BITPERIPHERALS_InADDR(_BITPERIPHERALS_InADDR),
	.CORES_BITPERIPHERALS_InDATA(_BITPERIPHERALS_InDATA),
	.CORES_BITPERIPHERALS_OutADDR(_BITPERIPHERALS_OutADDR),
	.CORES_BITPERIPHERALS_OutDATA(_BITPERIPHERALS_OutDATA)
);


//WORD_PERIPHERALS:
	wire 			 _WORDPERIPHERALS_EN;
	wire 		    _WORDPERIPHERALS_WE;
	wire  [15:0] _WORDPERIPHERALS_InADDR;
	wire  [ 7:0] _WORDPERIPHERALS_InDATA;
	wire  [15:0] _WORDPERIPHERALS_OutADDR;
	wire  [ 7:0] _WORDPERIPHERALS_OutDATA;
WORD_PERIPHERALS _WORD_PERIPHERALS
(
	.CLK(CLK),
	.WORDPERIPHERALS_EN(_WORDPERIPHERALS_EN),
	.WORDPERIPHERALS_WE(_WORDPERIPHERALS_WE),
	.WORDPERIPHERALS_InADDR(_WORDPERIPHERALS_InADDR),
	.WORDPERIPHERALS_InDATA(_WORDPERIPHERALS_InDATA),
	.WORDPERIPHERALS_OutADDR(_WORDPERIPHERALS_OutADDR),
	.WORDPERIPHERALS_OutDATA(_WORDPERIPHERALS_OutDATA)
);


//BIT_PERIPHERALS:
	wire 			 _BITPERIPHERALS_EN;
	wire 		    _BITPERIPHERALS_WE;
	wire			 _BITPERIPHERALS_LOAD;
	wire  [15:0] _BITPERIPHERALS_InADDR;
	wire 			 _BITPERIPHERALS_InDATA;
	wire  [15:0] _BITPERIPHERALS_OutADDR;
	wire 		 	 _BITPERIPHERALS_OutDATA;
//
BIT_PERIPHERALS _BIT_PERIPHERALS
(
	.CLK(CLK),
	.BITPERIPHERALS_EN(_BITPERIPHERALS_EN),
	.BITPERIPHERALS_WE(_BITPERIPHERALS_WE),
	.BITPERIPHERALS_LOAD(_BITPERIPHERALS_LOAD),
	.BITPERIPHERALS_InADDR(_BITPERIPHERALS_InADDR),
	.BITPERIPHERALS_InDATA(_BITPERIPHERALS_InDATA),
	.BITPERIPHERALS_OutADDR(_BITPERIPHERALS_OutADDR),
	.BITPERIPHERALS_OutDATA(_BITPERIPHERALS_OutDATA),
	
	.BITPERIPHERALS_INPUT(INPUTS),
	.BITPERIPHERALS_OUTPUT(OUTPUTS),
);


endmodule 