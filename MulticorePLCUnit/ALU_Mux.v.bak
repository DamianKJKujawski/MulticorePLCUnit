module ALU_Mux
(
	input 	[3:0]	ALU_Select,
	
	input		[7:0] A,
	input		[7:0] B,
	
	input 	[7:0] adder,
	input		[7:0] subtractor,
	
	output 	[7:0] ALU_Result,
	
	output 			comparatorResoult
);


assign comparatorResoult = ALU_Result[0];


always @(*)
begin
	case(ALU_Select)
		4'b0000:  
			ALU_Result <= A & B;
		4'b0001: 
			ALU_Result <= A | B;
		4'b0010: 
			ALU_Result <= ~A;
		4'b0011: 
			ALU_Result <= A ^ B;
		4'b0100: 
			ALU_Result <= A<<1;
		4'b0101: 
			ALU_Result <= A>>1;
		4'b0110: 
			ALU_Result <= {A[6:0],A[7]};
		4'b0111: 
			ALU_Result <= {A[0],A[7:1]};
		4'b1000: 
			ALU_Result <= adder;
		4'b1001: 
			ALU_Result <= subtractor;
		4'b1010:
			ALU_Result <= (A==B)?8'd1:8'd0;
		4'b1011:   
			ALU_Result <= (A> B)?8'd1:8'd0;
		4'b1100:
			ALU_Result <= (A>=B)?8'd1:8'd0;
		4'b1101:
			ALU_Result <= (A!=B)?8'd1:8'd0;
		4'b1110:
			ALU_Result <= (A<=B)?8'd1:8'd0;
		4'b1111:
			ALU_Result <= (A< B)?8'd1:8'd0;	
endcase
end
	 

endmodule 