module CPU_WordUnit
(
	// Inputs:
	input  wire 			clk,
	
	input  wire 	[3:0] ALU_Select,
	
	input  wire 	[1:0] A_Word_Select,
	
	input  wire 	[1:0]	B_Word_Select,
	
	input  wire 	[7:0]	ArgToSet,
	input  wire 	[7:0]	Memory_Data,

	input  wire				A_Word_Enable,
	input  wire				B_Word_Enable,
	
	input  wire 			OV_Ctrl,
	// Outputs:	
	output wire 	      OV,
	output wire 			comparatorResoult,
	
	output reg 		[7:0]	A 
);



// REGs
reg  [7:0] B;
wire [7:0] ALU_Resoult;


// Description:
always @(posedge clk)
begin
	if(A_Word_Enable)
	begin
		case(A_Word_Select)
			2'b00:
				A <= ArgToSet;
			2'b01:
				A <= Memory_Data;
			2'b10:
				A <= ALU_Resoult;
		endcase
	end
end





always @(posedge clk)
begin
	if(B_Word_Enable)
	begin
		case(B_Word_Select)
			2'd0:
				B <= ArgToSet;
			2'd1:
				B <= Memory_Data;
			2'd2:
				B <= A;
		endcase
	end
end


ALU ALU_Instance
(
	.clk(clk),
	.ALU_Select(ALU_Select),
	.A(A),
	.B(B),
	.OV_Ctrl(OV_Ctrl),
	.ALU_Resoult(ALU_Resoult),
	.ComparatorResoult(ComparatorResoult),
	.OV(OV)
);




initial
begin
	A <= 8'd0;
	B <= 8'd0;
end


endmodule 